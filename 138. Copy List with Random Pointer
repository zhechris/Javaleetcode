/**
 * Definition for singly-linked list with a random pointer.
 * class RandomListNode {
 *     int label;
 *     RandomListNode next, random;
 *     RandomListNode(int x) { this.label = x; }
 * };
 */
/*第一遍，对每个node进行复制，并插入其原始node的后面，新旧交替，变成重复链表。如：原始：1->2->3->null，复制后：1->1->2->2->3->3->null

 第二遍，遍历每个旧node，把旧node的random的复制给新node的random，因为链表已经是新旧交替的。所以复制方法为：

                                      node.next.random = node.random.next

             前面是说旧node的next的random，就是新node的random，后面是旧node的random的next，正好是新node，是从旧random复制来的。

 第三遍，则是把新旧两个表拆开，返回新的表即可。
 空间复杂度为1，时间复杂度为3n，因为需要遍历3次链表*/
public class Solution {
    public RandomListNode copyRandomList(RandomListNode head) {
        if(head == null)  
            return head;  
        RandomListNode node = head;  
        while(node!=null){
            RandomListNode newNode = new RandomListNode(node.label);  
            newNode.next = node.next;  
            node.next = newNode;  
            node = newNode.next;  
        } 
        
        node = head;  
        while(node!=null){
            if(node.random != null)  
                node.next.random = node.random.next;  
            node = node.next.next;  
        }
        
        RandomListNode newHead = head.next;  
        node = head;  
        while(node != null){  
            RandomListNode newNode = node.next;  
            node.next = newNode.next;  
            if(newNode.next!=null)  
                newNode.next = newNode.next.next;  
            node = node.next; //node.next已经变化
        }  
        return newHead;  
     }
}
