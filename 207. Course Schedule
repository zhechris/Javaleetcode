//有前提的都应该想到拓扑结构
//1.无环  2.A->B,B出现在A之后(两个特点)
class Solution {
    public boolean canFinish(int numCourses, int[][] prerequisites) {
        int preCount[] = new int[numCourses];
        Queue<Integer> notPre = new LinkedList<Integer>();
        // 统计每个结点作为前驱的次数
        for (int i = 0; i < prerequisites.length; i++) {
            preCount[prerequisites[i][0]]++;
        }
        // 记录出度为0的结点
        for (int i = 0; i < preCount.length; i++) {
            if (preCount[i] == 0) {
                notPre.offer(i);
            }
        }
        int num = notPre.size();// 可以拓扑排序的节点个数
        while (!notPre.isEmpty()) {//BFS
            int node = notPre.poll();
            for (int i = 0; i < prerequisites.length; i++) {
                if (prerequisites[i][1] == node) {
                    preCount[prerequisites[i][0]]--;//删除和node有关的边
                    if (preCount[prerequisites[i][0]] == 0) {//如果出度为0
                        num++;
                        notPre.offer(prerequisites[i][0]);
                    }
                }
            }
        }

        return num == numCourses;
    }
}
