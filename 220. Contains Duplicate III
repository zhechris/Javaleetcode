/*treeset其实就是BST。时间复杂度nlogn
floor(E e) 方法返回在这个集合中小于或者等于给定元素的最大元素，如果不存在这样的元素,返回null.
ceiling(E e) 方法返回在这个集合中大于或者等于给定元素的最小元素，如果不存在这样的元素,返回null.*/
class Solution {
    public boolean containsNearbyAlmostDuplicate(int[] nums, int k, int t) {
        if(nums==null||nums.length==0||k<=0)
            return false;
        TreeSet<Long> treeSet =new TreeSet<Long>();
        for(int i=0;i<nums.length;i++){
            final Long floor=treeSet.floor((long)nums[i]+t);
            final Long ceil=treeSet.ceiling((long)nums[i]-t);
            
            if((floor!=null&&floor>=(long)nums[i])||(ceil!=null&&ceil<=(long)nums[i])){
               return true;
            }
            treeSet.add((long)nums[i]);
            if(i>=k)        //因为元素的坐标差不能超过k，所以在treeSet中最多只能有k个元素
                treeSet.remove((long)nums[i-k]);
        }
        return false;
    }
}
