/*注意正确答案和错误答案的区别，调用会每次申请新的空间，不会改变原来的值
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    int count=0;
    int res=0;
    public int kthSmallest(TreeNode root, int k) {
        if(root==null)
            return 0;
        
        inorder(root,k,count,res);
        return res;
    }
    public void inorder(TreeNode root, int k,int count, int res){
        if(root == null)
            return;
        if(count >= k)
            return;
        inorder(root.left, k,count,res); 
        if(count >= k)
            return;
        res = root.val;
        count++;
        inorder(root.right, k,count,res);
    }
}
*/
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    int count=0;
    int res=0;
    public int kthSmallest(TreeNode root, int k) {
        if(root==null)
            return 0;
        inorder(root,k);
        return res;
    }
    public void inorder(TreeNode root, int k){
        if(root == null)
            return;
        if(count >= k)
            return;
        inorder(root.left, k); 
        if(count >= k)
            return;
        res = root.val;
        count++;
        inorder(root.right,k);
    }
}
