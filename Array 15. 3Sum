class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
        List<List<Integer>> my = new ArrayList();
        Arrays.sort(nums);
        for(int i=0;i<=nums.length-3;i++)//因为要有三个相加、所以只能到i-3
        {
            if(nums[i]<=0)
            {
                if(i>=1 && nums[i]==nums[i-1])
                    continue; //i++，一样的第一个数从最后一个开始算              
                int j=i+1;
                int k=nums.length -1;
                while(j<k)
                {
                    if(nums[i]+nums[j]+nums[k]==0)
                    {
                        List<Integer> one = new ArrayList<>();
                        one.add(nums[i]);
                        one.add(nums[j]);
                        one.add(nums[k]);
                        my.add(one);    
                        j++;
                        k--;
                        while(j<k && nums[j]==nums[j-1])//因为jk已经分别增加减少 所以当前的值已经移动
                            j++;
                        while(j<k && nums[k]==nums[k+1])
                            k--;
                    }

                    else 
                    {
                        boolean flag =true;
                        // 求有序数组中两个数的和为(-1)*nums[i]
                        while(flag)
                        {
                            while(j<k && nums[j]+nums[k]+nums[i]>0)
                                k--;
                            while(j<k && nums[j]+nums[k]+nums[i]<0)
                                j++;
                            if( j>=k||nums[j]+nums[k]+nums[i]==0)
                                flag = false;
                        }
                    }

                }   // while(j<k)
            }
        }
        return my;
    }
}
