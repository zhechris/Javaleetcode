/*如果target比A[mid]值要小
如果A[mid]右边有序（A[mid]<A[high])
那么target肯定不在右边（target比右边的都得小），在左边找
如果A[mid]左边有序
那么比较target和A[low]，如果target比A[low]还要小，证明target不在这一区，去右边找；反之，左边找。
如果target比A[mid]值要大
如果A[mid]左边有序（A[mid]>A[low]）
那么target肯定不在左边（target比左边的都得大），在右边找 
如果A[mid]右边有序
那么比较target和A[high]，如果target比A[high]还要大，证明target不在这一区，去左边找；反之，右边找。*/
class Solution {
    public int search(int [] nums,int target){
        if(nums==null||nums.length==0)
              return -1;

        int low = 0;
        int high = nums.length-1;

        while(low <= high){
            int mid = (low + high)/2;
            if(target < nums[mid]){
                if(nums[mid]<nums[high])//right side is sorted
                      high = mid - 1;//target must in left side
                else//left side is sorted
                  if(target<nums[low])//target cannot be in [low,mid] since this side is sorted
                         low = mid + 1;//target must in right side
                  else//target in the left side
                     high = mid - 1;
            }else if(target > nums[mid]){
                if(nums[low]<nums[mid])//left side is sorted
                      low = mid + 1;//target must in right side
                else//right side is sorted
                  if(target>nums[high])//right side is sorted. If target>A[high] means target is not in this side
                         high = mid - 1;
                  else
                     low = mid + 1;
            }else//target==nums[mid]
                return mid;
        }
        return -1;
    }
}
