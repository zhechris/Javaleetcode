/*这道题的思路很简单，假设输入的是"23"，2对应的是"abc"，3对应的是"edf"，那么我们在递归时，先确定2对应的其中一个字母（假设是a），
然后进入下一层，穷举3对应的所有字母，并组合起来（"ae"，"ad"，"af"），当"edf"穷举完后，
返回上一层，更新字母b，再重新进入下一层。这个就是backtracing的基本思想。*/
public class Solution {
    public List<String> letterCombinations(String digits) {
        //把table上的数字对应的字母列出来，当输入为2是，digits[2]就是2所对应的"abc"
        String[] table = new String[] 
                             {"","","abc","def","ghi","jkl","mno","pqrs","tuv","wxyz"};
        List<String> list = new ArrayList<String>();
        //index从0开始，即digits的第一个数字
        letterCombinations(list,digits,"",0,table);
        return list;
    }
    
    private void letterCombinations (List<String> list, String digits, 
                                    String curr, int index,String[] table) {
        //最后一层退出条件
        if (index == digits.length()) {
            if(curr.length() != 0) list.add(curr);
            return;
        }
        //找到数字对应的字符串
        String temp = table[digits.charAt(index) - '0'];
        for (int i = 0; i < temp.length(); i++) {
            //每次循环把不同字符串加到当前curr之后
            String next = curr + temp.charAt(i);
            //进入下一层
            letterCombinations(list,digits,next,index+1,table);
        }
    }
}
