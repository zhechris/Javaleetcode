class Solution {
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        List<List<Integer>> result=new ArrayList<>();
        List<Integer> list=new ArrayList<>();
        Arrays.sort(candidates); //must sort,or below break will run out of loop
        recurse(list, target, candidates, 0, result);
        return result;
    }
    public void recurse(List<Integer>list,int target,int[]candidates,int index, List<List<Integer>> result){
        if(target==0){
            result.add(list);
            return;
        }
        for(int i=index;i<candidates.length;i++){
            List<Integer> copy=new ArrayList<>(list);//assign last round value to new copylist
            int newtarget=target-candidates[i];
            if(newtarget>=0){
                copy.add(candidates[i]);
                recurse(copy,newtarget,candidates,i,result);
            }
            else
                break;
        }
    }
}
