class Solution {
   public List<List<Integer>> combinationSum2(int[] candidates, int target) {
        List<List<Integer>> result = new ArrayList<List<Integer>>();
        Arrays.sort(candidates); // sort the array
        recurse(new ArrayList<Integer>(), target, candidates, 0, result);
        return result;
    }

    /**
     * do it recursively
     */
    public void recurse(List<Integer> list, int target, int[] candidates, int index, List<List<Integer>> result) { // list is one of the answers
        if (target == 0) {
            result.add(list);
            return;
        }
        int pre=0;
        for (int i = index; i < candidates.length; i++) {
            if(candidates[i]==pre)//因为下一次迭代i从1开始，所以cadidates[0]找不到了，因此不能用cadidates[i]=cadidates[i-1]
                continue;
            int newTarget = target - candidates[i]; // subtract candidate from target
            if (newTarget >= 0) {
                List<Integer> copy = new ArrayList<Integer>(list); // create a copy
                pre=candidates[i];
                copy.add(candidates[i]);
                recurse(copy, newTarget, candidates, i+1, result); // see if there is more
            } else { // run out of target
                break;
            }
        }
    }
}
