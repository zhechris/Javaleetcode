/*因为该方法本来就用一个数组表示是否访问过，因此去重只用保证第一个重数是否已加入（考虑为整体），
后面的数只有当第一个数visit之后（整体加入），才被加入，否则continue跳过。为了实现这个思想，必须先对nums排序*/
public class Solution {
    public List<List<Integer>> permuteUnique(int[] num) {
        List<List<Integer>> result = new ArrayList<List<Integer>>();
        Arrays.sort(num);
        Boolean[] visited = new Boolean[num.length];
        for (int i = 0; i < visited.length; i ++){
            visited[i] = false;
        }
        DFS(num, 0, result, new LinkedList<Integer>(), visited);
        return result;
     }
    private void DFS(int[] num, int togo, List<List<Integer>> result, List<Integer> current, Boolean[] visited ){
        if (togo == visited.length){
            result.add(new LinkedList(current));
        }
        else{
            for (int i = 0; i < num.length; i ++){ 
                if (visited[i] == false){ 
                    if (i > 0 && num[i] == num[i-1] && visited[i-1] == false){
                        continue;//only insert duplicate element when the previous duplicate element has been inserted
                    }  
                    current.add(num[i]);
                    visited[i] = true;
                    DFS(num, togo + 1, result, current, visited);
                    current.remove(current.size() - 1);
                    visited[i] = false;
                }
            }//for i
        }//else
    }//
}
