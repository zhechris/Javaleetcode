//动态规划就是要找出递归，因为每次决策依赖于当前状态
class Solution {
    public int rob(int[] nums) {
        if(nums.length==0)
            return 0;
        if(nums.length == 1){
            return nums[0];
        }
        int include = nums[0];
        int exclude = 0;
        for(int cur=1;cur<nums.length;cur++)
        {
            int i = include;
            int e = exclude;
            exclude = Math.max(i, e);//当前没有抢，前一个不知道抢了没有
            include = e+nums[cur];//当前被抢了，前一个没有抢
        }
        return Math.max(exclude, include);
    }
}
