//考虑抢劫了第0个房间，那么问题就是求抢劫第0~N-1个房间的最大数
//考虑不抢劫第0个房间，那么问题就是求抢劫第1~N个房间的最大数
public class Solution {
    public int rob(int[] nums) {
        if(nums == null || nums.length == 0){
            return 0;
        }
        if(nums.length == 1){
            return nums[0];
        }
        return Math.max(robHelper(nums, 0, nums.length-2), robHelper(nums, 1, nums.length-1));
    }
    
    private int robHelper(int [] nums, int l, int r){
        int include = 0;
        int exclude = 0;
        for(int cur = l; cur<=r; cur++){
            int i = include;
            int e = exclude;
            exclude = Math.max(i, e);//当前没有抢，前一个不知道抢了没有
            include = e+nums[cur];//当前被抢了，前一个没有抢
        }
        return Math.max(exclude, include);
    }
}
