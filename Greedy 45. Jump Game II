/*该题思想主要是，扫描数组，以确定当前最远能覆盖的节点，放入maxreach。
然后继续扫描，直到当前的路程超过了上一次算出的覆盖范围reach，那么更新覆盖范围，同时更新跳数，
因为我们是经过了多一跳才能继续前进的。形象地说，这个是在争取每跳最远的greedy.
* ret:目前为止的jump数 
* curRch:从A[0]进行ret次jump之后达到的最大范围 
* curMax:从0~i这i+1个A元素中能达到的最大范围 
* 本来想省一跳，但是发现上一轮的最大范围够不到当前position，因此需要增加一次本轮jump，使之达到记录的curMax*/
class Solution {
    public int jump(int[] nums) {
        int ret = 0;
        int curMax = 0;  
        int curRch = 0;  
        for(int i = 0; i < nums.length; i ++)  
        {  
            if(curRch < i) //last round jumps cant satisfiy current range,so need to jump.
                //if dont need, they can save one round jump
            {  
                ret ++;  
                curRch = curMax;  
            }  
            curMax = Math.max(curMax, nums[i]+i);  
        }  
        return ret;  
    }
}
