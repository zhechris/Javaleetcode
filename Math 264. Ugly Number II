********************************************
id2=0,f2=2,min=2,ugly[1]=2,(f2==min)->f2=4,id2=1,                           f2=4,id2=1,min=4,ugly[3]=4,(f2==min)->f2=6,id2=2,                           
id3=0,f3=3                            f3=3,id3=0,min=3,ugly[2]=3,(f3==min)->f3=6,id3=1,                           f3=6,id3=1,                           
id5=0,f5=5                            f5=5,id5=0,                           f5=5,id5=0,                           f5=5,id5=0,min=5,ugly[4]=5,(f5==min)->
f2=6, id2=2,min=6,ugly[5]=6,(f2==min)->f2=8,id=3,min=8,ugly[6]=8,(f2==min)->f2=10,id=4
f3=6, id3=1,min=6,ugly[5]=6,(f3==min)->f3=9,id=2,                           f3=9,id=2 
f5=10,id5=1,                           f5=10,id=1,                          f5=10,id=1
********************************************
class Solution {
    public int nthUglyNumber(int n) {
        int[] ugly = new int[n];
        ugly[0] = 1;
        int index2 = 0, index3 = 0, index5 = 0;
        int factor2 = 2, factor3 = 3, factor5 = 5;
        for(int i=1;i<n;i++){
            int min = Math.min(Math.min(factor2,factor3),factor5);
            ugly[i] = min;
            if(factor2 == min)
                factor2 = 2*ugly[++index2];
            if(factor3 == min)
                factor3 = 3*ugly[++index3];
            if(factor5 == min)
                factor5 = 5*ugly[++index5];
        }
        return ugly[n-1];
    }
}
