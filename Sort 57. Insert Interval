/**
 * Definition for an interval.
 * public class Interval {
 *     int start;
 *     int end;
 *     Interval() { start = 0; end = 0; }
 *     Interval(int s, int e) { start = s; end = e; }
 * }
 */
class Solution {
    public List<Interval> insert(List<Interval> intervals, Interval newInterval) {
        List<Interval> res=new ArrayList<>();
        if(intervals.size()==0)
        {
            res.add(newInterval);
            return res;
        }
        for(Interval interval:intervals)
        {
            if(newInterval.start>interval.end)
                res.add(interval);
            else if(newInterval.end<interval.start)
            {
                res.add(newInterval);
                newInterval=interval;//in case original list has overlapping .
            }
            else if(newInterval.start<=interval.end||newInterval.end>=interval.start)
            {
                newInterval.start = Math.min(newInterval.start, interval.start);
                newInterval.end = Math.max(newInterval.end, interval.end);
            }
        }
        res.add(newInterval);
        return res;
    }
}
